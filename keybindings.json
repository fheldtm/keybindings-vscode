// 키 바인딩을 이 파일에 넣어서 기본값 재정의auto[]
[
  {
    "key": "cmd+a",
    "command": "-list.selectAll",
    "when": "listFocus && listSupportsMultiselect && !inputFocus"
  },
  {
    "key": "shift+cmd+k",
    "command": "-editor.action.deleteLines",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+k",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+up",
    "command": "-editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+j",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+down",
    "command": "-editoltr.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+d",
    "command": "-workbench.view.debug",
    "when": "viewContainer.workbench.view.debug.enabled"
  },
  {
    "key": "shift+cmd+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "cmd+d",
    "command": "-editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "cmd+a",
    "command": "-editor.action.selectAll"
  },
  {
    "key": "cmd+a",
    "command": "extension.vim_ctrl+a",
    "when": "editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl"
  },
  {
    "key": "ctrl+a",
    "command": "extension.vim_ctrl+a",
    "when": "editorTextFocus && vim.active && vim.use<C-a> && !inDebugRepl"
  },
  {
    "key": "shift+cmd+a",
    "command": "extension.vim_cmd+a",
    "when": "editorTextFocus && vim.active && vim.use<D-a> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "cmd+a",
    "command": "-extension.vim_cmd+a",
    "when": "editorTextFocus && vim.active && vim.use<D-a> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "cmd+x",
    "command": "-editor.action.clipboardCutAction"
  },
  {
    "key": "cmd+x",
    "command": "-execCut"
  },
  {
    "key": "cmd+x",
    "command": "extension.vim_ctrl+x",
    "when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl"
  },
  {
    "key": "ctrl+x",
    "command": "extension.vim_ctrl+x",
    "when": "editorTextFocus && vim.active && vim.use<C-x> && !inDebugRepl"
  },
  {
    "key": "cmd+c",
    "command": "extension.vim_ctrl+c",
    "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl"
  },
  {
    "key": "ctrl+c",
    "command": "extension.vim_ctrl+c",
    "when": "editorTextFocus && vim.active && vim.overrideCtrlC && vim.use<C-c> && !inDebugRepl"
  },
  {
    "key": "cmd+d",
    "command": "extension.vim_ctrl+d",
    "when": "editorTextFocus && vim.active && vim.use<C-d> && !inDebugRepl"
  },
  {
    "key": "ctrl+d",
    "command": "extension.vim_ctrl+d",
    "when": "editorTextFocus && vim.active && vim.use<C-d> && !inDebugRepl"
  },
  {
    "key": "shift+cmd+d",
    "command": "extension.vim_cmd+d",
    "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl"
  },
  {
    "key": "cmd+d",
    "command": "-extension.vim_cmd+d",
    "when": "editorTextFocus && vim.active && vim.use<D-d> && !inDebugRepl"
  },
  {
    "key": "cmd+u",
    "command": "extension.vim_ctrl+u",
    "when": "editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl"
  },
  {
    "key": "ctrl+u",
    "command": "extension.vim_ctrl+u",
    "when": "editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl"
  },
  {
    "key": "cmd+u",
    "command": "-cursorUndo",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+f",
    "command": "extension.vim_ctrl+f",
    "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+f",
    "command": "extension.vim_ctrl+f",
    "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "cmd+b",
    "command": "extension.vim_ctrl+b",
    "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "ctrl+b",
    "command": "extension.vim_ctrl+b",
    "when": "editorTextFocus && vim.active && vim.use<C-b> && !inDebugRepl && vim.mode != 'Insert'"
  },
  {
    "key": "cmd+k",
    "command": "-workbench.action.terminal.clear",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "shift+cmd+r",
    "command": "workbench.action.reloadWindow",
    "when": "isDevelopment"
  },
  {
    "key": "cmd+r",
    "command": "-workbench.action.reloadWindow",
    "when": "isDevelopment"
  },
  {
    "key": "shift+cmd+r",
    "command": "-rerunSearchEditorSearch",
    "when": "inSearchEditor"
  },
  {
    "key": "cmd+r",
    "command": "extension.vim_ctrl+r",
    "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl"
  },
  {
    "key": "ctrl+r",
    "command": "extension.vim_ctrl+r",
    "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl"
  },
  {
    "key": "ctrl+[",
    "command": "extension.vim_ctrl+[",
    "when": "editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl"
  },
  {
    "key": "ctrl+]",
    "command": "extension.vim_ctrl+]",
    "when": "editorTextFocus && vim.active && vim.use<C-]> && !inDebugRepl"
  },
  {
    "key": "shift+cmd+[",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+[",
    "command": "-editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+]",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+]",
    "command": "-editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "shift+cmd+]",
    "command": "editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "alt+f12",
    "command": "-editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+-",
    "command": "-workbench.action.navigateBack",
    "when": "canNavigateBack"
  },
  {
    "key": "alt+cmd+right",
    "command": "-workbench.action.nextEditor"
  },
  {
    "key": "cmd+]",
    "command": "workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+cmd+right",
    "command": "-workbench.action.terminal.focusNextPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+cmd+left",
    "command": "-workbench.action.previousEditor"
  },
  {
    "key": "cmd+[",
    "command": "workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "alt+cmd+left",
    "command": "-workbench.action.terminal.focusPreviousPane",
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },
  {
    "key": "cmd+f12",
    "command": "editor.action.peekDefinition",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  {
    "key": "f11",
    "command": "workbench.action.navigateBack"
  },
  {
    "key": "ctrl+`",
    "command": "workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "ctrl+`",
    "command": "-workbench.action.terminal.toggleTerminal",
    "when": "terminal.active"
  },
  {
    "key": "cmd+space",
    "command": "editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  },
  {
    "key": "cmd+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+n",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "-cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "cmd+n",
    "command": "extension.vim_ctrl+n",
    "when": "editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
  },
  {
    "key": "ctrl+n",
    "command": "extension.vim_ctrl+n",
    "when": "editorTextFocus && vim.active && vim.use<C-n> && !inDebugRepl || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-n> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
  },
  {
    "key": "ctrl+n",
    "command": "-list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "cmd+p",
    "command": "extension.vim_ctrl+p",
    "when": "suggestWidgetVisible && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
  },
  {
    "key": "ctrl+p",
    "command": "extension.vim_ctrl+p",
    "when": "suggestWidgetVisible && vim.active && vim.use<C-p> && !inDebugRepl || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'CommandlineInProgress' || vim.active && vim.use<C-p> && !inDebugRepl && vim.mode == 'SearchInProgressMode'"
  },
  {
    "key": "alt+n",
    "command": "welcome.showNewFileEntries"
  },
  {
    "key": "ctrl+alt+cmd+n",
    "command": "-welcome.showNewFileEntries"
  },
  {
    "key": "[Backquote] cmd",
    "command": "workbench.action.togglePanel"
  },
  {
    "key": "cmd+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "shift+cmd+c",
    "command": "-workbench.action.terminal.openNativeConsole",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+[Backquote]",
    "command": "workbench.action.terminal.toggleTerminal"
  },

  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------
  // ---------------------------------------------------

  // my custom remap
  {
    "key": "cmd+shift+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+shift+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },

  // terminal cmd + c to <C-c>
  {
    "key": "cmd+c",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "\u0003"
    },
    "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
  },

  // open quickOpen
  {
    "key": "; f",
    "command": "workbench.action.quickOpen",
    "when": "(activeEditorGroupEmpty && !inputFocus) || (!terminalFocus && resourceScheme == 'file' && resourceLangId == 'image') || vim.active && !inDebugRepl && vim.mode != 'Insert' && vim.mode != 'SearchInProgressMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && ((sideBarFocus && !inputFocus) || editorTextFocus)"
  },

  // close left sidebar
  {
    "key": "; c",
    "command": "workbench.action.closeSidebar",
    "when": "(activeEditorGroupEmpty && !inputFocus) || (!terminalFocus && resourceScheme == 'file' && resourceLangId == 'image') || vim.active && !inDebugRepl && vim.mode != 'Insert' && vim.mode != 'SearchInProgressMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && ((sideBarFocus && !inputFocus) || editorTextFocus)"
  },
  // open file sidebar
  {
    "key": "; v",
    "command": "workbench.view.explorer",
    "when": "(activeEditorGroupEmpty && !inputFocus) || (!terminalFocus && resourceScheme == 'file' && resourceLangId == 'image') || vim.active && !inDebugRepl && vim.mode != 'Insert' && vim.mode != 'SearchInProgressMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && ((sideBarFocus && !inputFocus) || editorTextFocus)"
  },
  // open search sidebar
  {
    "key": "; s",
    "command": "workbench.view.search",
    "when": "(activeEditorGroupEmpty && !inputFocus) || (!terminalFocus && resourceScheme == 'file' && resourceLangId == 'image') || vim.active && !inDebugRepl && vim.mode != 'Insert' && vim.mode != 'SearchInProgressMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && ((sideBarFocus && !inputFocus) || editorTextFocus)"
  },
  // open problem viewer
  {
    "key": "; e",
    "command": "workbench.action.problems.focus",
    "when": "(activeEditorGroupEmpty && !inputFocus) || (!terminalFocus && resourceScheme == 'file' && resourceLangId == 'image') || vim.active && !inDebugRepl && vim.mode != 'Insert' && vim.mode != 'SearchInProgressMode' && vim.mode != 'EasyMotionMode' && vim.mode != 'EasyMotionInputMode' && ((sideBarFocus && !inputFocus) || editorTextFocus)"
  },
  // close problem viewer
  {
    "key": "cmd+c",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "problemsFilterFocus || focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "cmd+c",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "problemsFilterFocus || focusedView == 'workbench.panel.markers.view'"
  },
  // sidebar cmd to ctrl
  {
    "key": "cmd+u",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "list.focusPageUp",
        "workbench.view.explorer",
        "workbench.view.explorer"
      ]
    },
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "cmd+d",
    "command": "extension.multiCommand.execute",
    "args": {
      "sequence": [
        "list.focusPageDown",
        "workbench.view.explorer",
        "workbench.view.explorer"
      ]
    },
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },

  // quickOpen
  // close quickOpen
  {
    "key": "cmd+c",
    "command": "workbench.action.closeQuickOpen",
    "when": "isMac && inQuickOpen"
  },
  {
    "key": "ctrl+c",
    "command": "workbench.action.closeQuickOpen",
    "when": "!isMac && inQuickOpen"
  },
  // move quickOpen
  {
    "key": "cmd+p",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "isMac && inQuickOpen"
  },
  {
    "key": "cmd+n",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "isMac && inQuickOpen"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "!isMac && inQuickOpen"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "!isMac && inQuickOpen"
  },
  // open file from quickOpen
  {
    "key": "cmd+o",
    "command": "workbench.action.acceptSelectedQuickOpenItem",
    "when": "isMac && inQuickOpen"
  },
  {
    "key": "ctrl+o",
    "command": "workbench.action.acceptSelectedQuickOpenItem",
    "when": "!isMac && inQuickOpen"
  },
  // new tab
  {
    "key": "t n t",
    "command": "workbench.action.files.newUntitledFile",
    "when": "activeEditorGroupEmpty && !inputFocus"
  },
  // explorer new file and delete file
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "x",
    "command": "moveFileToTrash",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+x",
    "command": "deleteFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "p",
    "command": "copyRelativeFilePath",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+p",
    "command": "copyFilePath",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "o",
    "command": "explorer.openAndPassFocus",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },
  {
    "key": "v",
    "command": "filesExplorer.openFilePreserveFocus",
    "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
  },

  // problems viewer remap
  {
    "key": "cmd+n",
    "command": "list.focusDown",
    "when": "problemsFilterFocus || focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "cmd+p",
    "command": "list.focusUp",
    "when": "problemsFilterFocus || focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "ctrl+n",
    "command": "list.focusDown",
    "when": "problemsFilterFocus || focusedView == 'workbench.panel.markers.view'"
  },
  {
    "key": "ctrl+p",
    "command": "list.focusUp",
    "when": "problemsFilterFocus || focusedView == 'workbench.panel.markers.view'"
  },

  // definition
  {
    "key": "cmd+]",
    "command": "editor.action.revealDefinition",
    "when": "isMac && editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "ctrl+]",
    "command": "editor.action.revealDefinition",
    "when": "!isMac && editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  {
    "key": "cmd+o",
    "command": "extension.vim_ctrl+o",
    "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"
  },
  {
    "key": "ctrl+o",
    "command": "extension.vim_ctrl+o",
    "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"
  },
  {
    "key": "cmd+c",
    "command": "closeReferenceSearchEditor",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },

  // code action remap
  {
    "key": "cmd+n",
    "command": "selectNextCodeAction",
    "when": "isMac && codeActionMenuVisible"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextCodeAction",
    "when": "!isMac && codeActionMenuVisible"
  },
  {
    "key": "cmd+p",
    "command": "selectPrevCodeAction",
    "when": "isMac && codeActionMenuVisible"
  },
  {
    "key": "ctrl+p",
    "command": "selectPrevCodeAction",
    "when": "!isMac && codeActionMenuVisible"
  },

  // references
  {
    // references list up
    "key": "cmd+p",
    "command": "list.focusUp",
    "when": "isMac && inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    // references list up
    "key": "ctrl+p",
    "command": "list.focusUp",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    // references list down
    "key": "cmd+n",
    "command": "list.focusDown",
    "when": "isMac && inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    // references list down
    "key": "ctrl+n",
    "command": "list.focusDown",
    "when": "inReferenceSearchEditor || referenceSearchVisible"
  },
  {
    // close referencesSearch
    "key": "cmd+c",
    "command": "closeReferenceSearch",
    "when": "isMac && referenceSearchVisible && !config.editor.stablePeek"
  },
  {
    // close referencesSearch
    "key": "ctrl+c",
    "command": "closeReferenceSearch",
    "when": "referenceSearchVisible && !config.editor.stablePeek"
  }
]
